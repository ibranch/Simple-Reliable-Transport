#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#

import sys
import socket
import time
import datetime
import select
import json

MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = .1
TOTAL_TIMEOUT = 30
SEQUENCE = 0
START = time.time()

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.settimeout(TIMEOUT)

window = 1
packets_in_flight = {}  # {Sequence : data}
current_len_data = 0


def log(string):
    sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")


def send_next_packet():
    global SEQUENCE

    data = sys.stdin.read(DATA_SIZE)
    if (len(data) > 0):
        log("MORE DATA")
        msg = json.dumps({"sequence": int(SEQUENCE), "data": data, "ack": False, "eof": False})
        packets_in_flight[int(SEQUENCE)] = data
        SEQUENCE += len(data)
        send_msg(msg, data)
        return True
    else:
        log("NO MORE DATA")
        return False


def send_msg(msg, data):
    if sock.sendto(msg, dest) < len(msg):
        log("[error] unable to fully send packet")
    else:
        log("[send data] " + msg)


def send_last_packet_in_flight():
    global SEQUENCE
    log(json.dumps(packets_in_flight))
    msg = json.dumps({"sequence": min(packets_in_flight), "data": packets_in_flight[min(packets_in_flight)], "ack": False, "eof": False})
    send_msg(msg, packets_in_flight[min(packets_in_flight)])
    main()


def recieve_ack():
    global window
    log(json.dumps(packets_in_flight))
    window += 1
    del packets_in_flight[min(packets_in_flight)]
    log("deleting packet in flight")


def finish_program():
    sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": False}), dest)
    sys.exit(0)


def main():
    # Now read in data, send packets
    try:
        while True:
            log("ABOUT TO SLEEP")
            if time.time() - START > TOTAL_TIMEOUT:
                sys.exit(-1)

            result = sock.recvfrom(MSG_SIZE)
            if result:
                (data, addr) = result
                try:
                    log("got data")

                    decoded = json.loads(data)
                    # If there is an ack, send next packet
                    if decoded['ack'] == SEQUENCE:
                        recieve_ack()
                        log("[recv ack] " + str(SEQUENCE))

                        # Try to send next packet; break if no more data
                        if not send_next_packet() and not packets_in_flight:
                            log("COMPLETE")
                            finish_program()
                            break
                        continue
                    else:
                        log("ACK NOT SEQ MINE: ")
                        log(json.dumps(SEQUENCE))
                        log(json.dumps(decoded))
                except (ValueError, KeyError, TypeError):
                    log("[recv corrupt packet]")
    except socket.timeout:
        log("resending packets")
        send_last_packet_in_flight()

# Send first packet
send_next_packet()
main()