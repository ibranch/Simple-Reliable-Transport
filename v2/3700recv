#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#

import sys
import socket
import time
import datetime
import select
import json

def log(string):
    sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

MSG_SIZE = 1500
TIMEOUT = 30

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = 0

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))

expected_sequence = 0
recorded_packets = {} # {Sequence : data}


def recieve_data(sequence, data):
    pass
    global expected_sequence

    recorded_packets[sequence] = data

    # in order
    if expected_sequence == sequence:
        sys.stdout.write(data)
        expected_sequence += len(data)
        log("[recv data] " + str(sequence) + " (" + str(len(data)) + ") ACCEPTED (in-order)")
        send_out_of_order_packets()
        # Send back an ack to the sender
        msg = json.dumps({"ack": sequence + len(data)})
        log("ABOUT TO SEND " + msg)
        send_msg(msg)
    #out of order
    elif expected_sequence < sequence:
        log("[recv data] " + str(sequence) + " (" + str(len(data)) + ") NOT ACCEPTED (out-of-order)")
    #duplicate
    else:
        log("[recv data] " + str(sequence) + " (" + str(len(data)) + ") NOT ACCEPTED (duplicate)")
        msg = json.dumps({"ack": sequence + len(data)})
        log("ABOUT TO SEND " + msg)
        send_msg(msg)


def send_msg(msg):
    if sock.sendto(msg, addr) < len(msg):
        log("[error] unable to fully send packet")


def send_out_of_order_packets():
    global expected_sequence

    while expected_sequence in recorded_packets:
        sys.stdout.write(recorded_packets[expected_sequence])
        msg = json.dumps({"ack": int(expected_sequence)})
        send_msg(msg)
        expected_sequence += len(recorded_packets[expected_sequence])


# Now listen for packets
while True:
    result = sock.recvfrom(MSG_SIZE)

    # If nothing is ready, we hit the timeout
    if result:
        (data, addr) = result

        try:
            decoded = json.loads(data)

            # If the EOF flag is set, exit
            if decoded['eof']:
                log("[completed]")
                sys.exit(0)

            # If there is data, we accept it and print it out
            if decoded['data']:
                recieve_data(decoded['sequence'], decoded['data'])




        except (ValueError, KeyError, TypeError) as e:
            log("[recv corrupt packet]")
            raise e
    else:
        log("[error] timeout")
        sys.exit(-1)
